<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Cropper</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 0;
            padding: 20px;
            padding-bottom: 100px; /* Extra space for the cropped images */
        }
        #image-display {
            margin: 20px auto;
            position: relative;
            max-width: 80%;
            border: 1px solid #ccc;
        }
        canvas {
            border: 1px solid #000;
            cursor: crosshair;
        }
        #pages-container {
            display: flex;
            overflow-x: auto;
            margin-top: 20px;
            justify-content: flex-start;
        }
        #pages-container img {
            margin: 10px;
            border: 1px solid #ccc;
            cursor: pointer;
            max-height: 400px;
            max-width: 100%;
            object-fit: contain;
        }
        #cropped-images {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: white;
            border-top: 1px solid #ccc;
            padding: 10px;
            z-index: 999;
            overflow-x: auto;
        }
        #cropped-images img {
            margin: 10px;
            border: 1px solid #ccc;
            width: 150px;
            height: 150px;
            object-fit: cover;
            cursor: pointer;
        }

        /* Floating Crop Button */
        #crop-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 18px;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            z-index: 1000;
        }
        #crop-btn:hover {
            background-color: #0056b3;
        }

        /* Modal for Viewing Cropped Image */
        #image-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        #modal-content {
            position: relative;
            background-color: white;
            padding: 20px;
            border-radius: 10px;
        }
        #modal-content img {
            max-width: 100%;
            max-height: 80vh;
        }
        #close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: red;
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
        }
        #close-btn:hover {
            background-color: darkred;
        }
    </style>
</head>
<body>
    <h1>PDF Cropper</h1>
    <input type="file" id="pdf-upload" accept=".pdf">
    <button id="crop-btn" title="Crop">âœ‚</button>

    <div id="pages-container"></div>

    <!-- Modal for Cropped Image -->
    <div id="image-modal">
        <div id="modal-content">
            <button id="close-btn">X</button>
            <img id="modal-image" src="" alt="Cropped Image">
        </div>
    </div>

    <div id="cropped-images"></div>

    <script>
        const pdfInput = document.getElementById('pdf-upload');
        const cropBtn = document.getElementById('crop-btn');
        const pagesContainer = document.getElementById('pages-container');
        const imageModal = document.getElementById('image-modal');
        const modalImage = document.getElementById('modal-image');
        const closeModalBtn = document.getElementById('close-btn');
        const croppedImagesContainer = document.getElementById('cropped-images');
        let pdfDoc = null;
        let selectedImgElement = null;
        let imgCanvas = null;
        let imgCtx = null;
        let startX, startY, endX, endY, isDragging = false;

        // Handle PDF upload
        pdfInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const pdfData = new Uint8Array(e.target.result);
                    pdfjsLib.getDocument(pdfData).promise.then((doc) => {
                        pdfDoc = doc;
                        renderAllPages();  // Render all pages
                    });
                };
                reader.readAsArrayBuffer(file);
            }
        });

        // Render all PDF pages
        function renderAllPages() {
            for (let pageNum = 1; pageNum <= pdfDoc.numPages; pageNum++) {
                renderPage(pageNum);
            }
        }

        // Render a single PDF page as an image
        function renderPage(pageNum) {
            pdfDoc.getPage(pageNum).then((page) => {
                const scale = 1.5;
                const viewport = page.getViewport({ scale });

                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                canvas.width = viewport.width;
                canvas.height = viewport.height;

                page.render({
                    canvasContext: ctx,
                    viewport: viewport
                }).promise.then(() => {
                    const img = document.createElement('img');
                    img.src = canvas.toDataURL();
                    img.classList.add('pdf-page');
                    img.setAttribute('data-page', pageNum);
                    img.addEventListener('click', selectImage);
                    pagesContainer.appendChild(img);
                });
            });
        }

        // Select image for cropping
        function selectImage(event) {
            // Remove canvas and reset previous selection if exists
            if (selectedImgElement) {
                if (imgCanvas) {
                    imgCanvas.remove();
                }
                selectedImgElement.classList.remove('selected');
            }

            // Set the new selected image
            selectedImgElement = event.target;

            // Highlight the selected image
            selectedImgElement.classList.add('selected');

            // Create canvas based on selected image size
            imgCanvas = document.createElement('canvas');
            imgCtx = imgCanvas.getContext('2d');
            imgCanvas.width = selectedImgElement.naturalWidth;
            imgCanvas.height = selectedImgElement.naturalHeight;

            // Draw the image fully inside the canvas
            imgCtx.drawImage(selectedImgElement, 0, 0, imgCanvas.width, imgCanvas.height);

            // Append canvas to body for cropping interaction
            document.body.appendChild(imgCanvas);

            // Enable cropping on canvas
            imgCanvas.addEventListener('mousedown', (e) => {
                const rect = imgCanvas.getBoundingClientRect();
                startX = e.clientX - rect.left;
                startY = e.clientY - rect.top;
                isDragging = true;
            });

            imgCanvas.addEventListener('mousemove', (e) => {
                if (isDragging) {
                    const rect = imgCanvas.getBoundingClientRect();
                    endX = e.clientX - rect.left;
                    endY = e.clientY - rect.top;

                    // Redraw image and selection rectangle
                    imgCtx.clearRect(0, 0, imgCanvas.width, imgCanvas.height);
                    imgCtx.drawImage(selectedImgElement, 0, 0, imgCanvas.width, imgCanvas.height);
                    imgCtx.strokeStyle = 'red';
                    imgCtx.lineWidth = 2;
                    imgCtx.strokeRect(startX, startY, endX - startX, endY - startY);
                }
            });

            imgCanvas.addEventListener('mouseup', () => {
                isDragging = false;
            });
        }

        // Floating Crop Button Click
        cropBtn.addEventListener('click', () => {
            if (endX && endY) {
                const cropWidth = endX - startX;
                const cropHeight = endY - startY;

                // Create a temporary canvas for the cropped image
                const tempCanvas = document.createElement('canvas');
                const tempCtx = tempCanvas.getContext('2d');
                tempCanvas.width = cropWidth;
                tempCanvas.height = cropHeight;

                // Ensure the coordinates are correctly scaled to the image's dimensions
                tempCtx.drawImage(
                    selectedImgElement,
                    startX, startY, cropWidth, cropHeight,
                    0, 0, cropWidth, cropHeight
                );

                // Create an image element for the cropped image
                const croppedImage = document.createElement('img');
                croppedImage.src = tempCanvas.toDataURL('image/png');
                croppedImagesContainer.appendChild(croppedImage);

                // Add click event to open image in modal
                croppedImage.addEventListener('click', () => {
                    modalImage.src = croppedImage.src;
                    imageModal.style.display = 'flex';
                });
            }
        });

        // Close the modal when clicking the "X" button
        closeModalBtn.addEventListener('click', () => {
            imageModal.style.display = 'none';
        });

        // Close the modal if the user clicks outside the modal content
        imageModal.addEventListener('click', (e) => {
            if (e.target === imageModal) {
                imageModal.style.display = 'none';
            }
        });
    </script>
</body>
</html>
